import dotenv from 'dotenv'
import { ChatbotService } from '../services/database/chatbots.js'
import { WelcomeService } from '../services/database/welcomes.js'
import { PromptsService } from '../services/database/prompts.js'

dotenv.config()

const DEFAULT_USER_ID = process.env.DEFAULT_USER_ID

const initChatbot = async () => {
    try {
        // 1. Create a chatbot
        console.log('Creating chatbot...')
        const chatbot = await ChatbotService.createChatbot(
            DEFAULT_USER_ID,
            'TecnoBot Demo',
            'Chatbot de demostraciÃ³n con IA y captura de datos'
        )
        console.log('Chatbot created:', chatbot)

        // 2. Create welcome message
        console.log('Creating welcome message...')
        const welcome = await WelcomeService.createWelcome(
            DEFAULT_USER_ID,
            chatbot.id,
            `Â¡Hola! ðŸ‘‹ Soy ${chatbot.name_chatbot}, tu asistente virtual.

Me puedes preguntar cualquier cosa sobre nuestros productos y servicios.
TambiÃ©n puedo ayudarte a:
- Registrar tus datos
- Resolver dudas
- Proporcionar informaciÃ³n

Â¿En quÃ© puedo ayudarte hoy?`
        )
        console.log('Welcome message created:', welcome)

        // 3. Create behavior prompt
        console.log('Creating behavior prompt...')
        const behaviorPrompt = await PromptsService.createBehaviorPrompt(
            DEFAULT_USER_ID,
            chatbot.id,
            `Eres un asistente virtual profesional y amigable llamado ${chatbot.name_chatbot}.

Directrices de comportamiento:
1. SÃ© amable y profesional en todo momento
2. Usa un lenguaje claro y conciso
3. Si no estÃ¡s seguro de una respuesta, admÃ­telo
4. MantÃ©n las respuestas breves pero informativas
5. Usa emojis ocasionalmente para dar un toque amigable
6. Si el usuario necesita registrarse, sugiÃ©rele escribir "registro"
7. Si no puedes ayudar con algo especÃ­fico, ofrece alternativas

Tu objetivo es ayudar a los usuarios de la manera mÃ¡s eficiente y amable posible.`
        )
        console.log('Behavior prompt created:', behaviorPrompt)

        // 4. Create knowledge prompts
        console.log('Creating knowledge prompts...')
        const knowledgePrompts = await Promise.all([
            PromptsService.createKnowledgePrompt(
                DEFAULT_USER_ID,
                chatbot.id,
                `InformaciÃ³n General de la Empresa:
- Somos una empresa tecnolÃ³gica especializada en soluciones digitales
- Horario de atenciÃ³n: Lunes a Viernes de 9:00 AM a 6:00 PM
- UbicaciÃ³n: Ciudad de MÃ©xico
- TelÃ©fono: +52 55 1234 5678
- Email: info@tecnobot.com`,
                'general'
            ),
            PromptsService.createKnowledgePrompt(
                DEFAULT_USER_ID,
                chatbot.id,
                `Productos y Servicios:
1. Desarrollo de Software
   - Aplicaciones Web
   - Aplicaciones MÃ³viles
   - Sistemas Empresariales
2. ConsultorÃ­a IT
   - AsesorÃ­a TecnolÃ³gica
   - TransformaciÃ³n Digital
3. Soporte TÃ©cnico
   - Soporte 24/7
   - Mantenimiento Preventivo`,
                'productos'
            ),
            PromptsService.createKnowledgePrompt(
                DEFAULT_USER_ID,
                chatbot.id,
                `PolÃ­ticas de Servicio:
- GarantÃ­a de satisfacciÃ³n del cliente
- Soporte tÃ©cnico incluido por 3 meses
- Actualizaciones gratuitas durante el primer aÃ±o
- Confidencialidad de datos garantizada
- Tiempo de respuesta mÃ¡ximo: 24 horas hÃ¡biles`,
                'politicas'
            )
        ])
        console.log('Knowledge prompts created:', knowledgePrompts)

        console.log('Â¡InicializaciÃ³n completada con Ã©xito!')
        return { chatbot, welcome, behaviorPrompt, knowledgePrompts }
    } catch (error) {
        console.error('Error durante la inicializaciÃ³n:', error)
        throw error
    }
}

// Ejecutar la inicializaciÃ³n
initChatbot()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error('Error fatal:', error)
        process.exit(1)
    }) 